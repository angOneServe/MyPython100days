1.tkinter中的鼠标形状cursor设置：
"arrow" "circle" "clock" "cross" "dotbox" "exchange" "fleur" "heart" "heart" "man" "mouse" "pirate" "plus" "shuttle" "sizing" "spider" "spraycan" "star" "target" "tcross" "trek" "watch"


2.label 参考链接：https://blog.csdn.net/qq_41556318/article/details/85079411


3.tkinter
    参考链接1：https://cloud.tencent.com/developer/section/
    参考链接2：https://www.jianshu.com/p/c9fb28367015
    参考链接3(细节)：https://blog.csdn.net/weixin_42272768/article/details/100191059


4.python100days:https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/13.%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B.md



5.Tk()实例化窗口后，geometry设置窗口大小的字符串参数格式"axb+x+y"，a：窗口宽度 b:窗口高度  x:窗口x坐标，0为屏幕左边  y:窗口y坐标，0为屏幕上面【屏幕左上角为零点】



6.pack布局的参数：
    side[靠边]：left right top bottom
    fill[填充]:x y both none
    expand[扩展]:yes no
    anchor:n e s w center
    padx:x方向的外边距
    pady:y方向的外边距
    ipadx:x方向的内边距
    ipady：y方向的内边距



7.text属性：
    autoseparators	单词之间的间隔。默认值是1
    background
    bg	            设置背景颜色，如bg=‘green’
    borderwidth
    bd	            文本控件的边框宽度。默认是1-2个像素。
    cursor	        文本控件的光标。默认是字符插入光标（一般是一个“I-beam”类型的光标）
    exportselection	是否允许拷贝内容到剪贴板
    foregroundfg	设置前景（文本）颜色
    font	        设置字体类型与大小
    height	        文本控件的高度。默认是24行。
    highlightbackground	定义文本控件没有获得输入焦点状态下的高亮背景颜色。就是文本控件的亮边。
    highlightcolor	    与highlightbackground属性类似。不过是文本控件获得输入焦点时的边框颜色。
    highlightthickness	文本控件获得输入焦点时的边框宽度。一般1-2个像素。
    insertbackground	设置文本控件插入光标的颜色
    insertborderwidth	插入光标的边框宽度。如果是一个非0的数值，光标会使用RAISED效果的边框。
    insertofftime
    insertontime	    这两个属性控制插入光标闪烁效果。就是插入光标的出现和消失的时间。单位是毫秒。
    insertwidth	        设置插入光标的宽度。
    maxundo	            最大Undo的次数。默认是0。
    padx	            水平边框的内边距
    pady	            垂直边框的内边距
    relief	            指定文本控件的边框3D效果,默认是flat,可以设置的参数;flat、groove、raised、ridge、solid、sunken
    selectbackground	设置选中文本的背景颜色
    selectborderwidth	设置选中区域边界宽度。
    selectforeground	设置选中文本的颜色
    setgrid	            boolean类型。为True时，可以让窗口最大化，并显示整个Text控件
    spacing1	上行间距。如果有折行，只在第一行起作用
    spacing2	折行之间的行间距
    spacing3	下行间距。如果有折行，只在最后一行起作用。
    state	    定义文本控件的状态。状态有二种：NORMAL和DISABLED
    tabs	    定义按动Tab键时候的移动距离。
    takefocus	定义是否可以使用Tab键移动输入焦点到该控件。
    undo	    开启undo/redo功能。
    width	    定义文本控件的宽度，单位是字符个数。
    wrap	    定义如何折行显示文本控件的内容
    xscrollcommand
    yscrollcommand	将滚动条与文本控件关联起来，处理滚动条动作。滚动条分别对应水平或者垂直滚动条。




8；menu参数

    Menu(master=None, **options) (class)

    master -- 父组件

    **options -- 组件选项，下方表格详细列举了各个选项的具体含义和用法：

    选项	含义
    activebackground	设置当 Menu 处于 "active" 状态（通过 state 选项设置状态）的背景色
    activeborderwidth	设置当 Menu 处于 "active" 状态（通过 state 选项设置状态）的边框宽度
    activeforeground	设置当 Menu 处于 "active" 状态（通过 state 选项设置状态）的前景色
    background	设置背景颜色
    bg	跟 background 一样
    borderwidth	指定边框宽度
    bd	跟 borderwidth 一样
    cursor	指定当鼠标在 Menu 上飘过的时候的鼠标样式
    disabledforeground	指定当 Menu 处于 "disabled" 状态的时候的前景色
    font	指定 Menu 中文本的字体
    foreground	设置 Menu 的前景色
    fg	跟 foreground 一样
    postcommand	将此选项与一个方法相关联，当菜单被打开的时候该方法将自动被调用
    relief	1. 指定边框样式2. 默认值是 "flat"3. 另外你还可以设置 "sunken"，"raised"，"groove" 或 "ridge"
    selectcolor	指定当菜单项显示为单选按钮或多选按钮时选择中标志的颜色
    tearoff	1. 默认情况下菜单可以被“撕下”（点击 IDLE 菜单上边的 --------- 试试）
    2. 将该选项设置为 Flase 关闭这一特性
    tearoffcommand	如果你希望当用户“撕下”你的菜单时通知你的程序，那么你可以将该选项与一个方法相关联，那么当用户“撕下”你的菜单时，Tkinter 会带着两个参数去调用你的方法（一个参数是当前窗口的 ID，另一个参数是承载被“撕下”的菜单的窗口 ID）
    title	默认情况下，被“撕下”的菜单标题是其主菜单的名字，不过你也可以通过修改此项的值来修改标题
    方法

add(type, **options)
    -- type 参数指定添加的菜单类型，可以是："command"，"cascade"，"checkbutton"，"radiobutton" 或 "separator"
    -- 还可以通过 options 选项设置菜单的属性，下表列举了 options 可以使用的选项和具体含义：

    选项	含义
    accelerator	1. 显示该菜单项的加速键（快捷键）
    2. 例如 accelerator = "Ctrl+N"
    3. 该选项仅显示，并没有实现加速键的功能（通过按键绑定实现）
    activebackground	设置当该菜单项处于 "active" 状态（通过 state 选项设置状态）的背景色
    activeforeground	设置当该菜单项处于 "active" 状态（通过 state 选项设置状态）的前景色
    background	设置该菜单项的背景颜色
    bitmap	指定显示到该菜单项上的位图
    columnbreak	从该菜单项开始另起一列显示
    command	将该选项与一个方法相关联，当用户点击该菜单项时将自动调用此方法
    compound	1. 控制菜单项中文本和图像的混合模式
    2. 如果该选项设置为 "center"，文本显示在图像上（文本重叠图像）
    3. 如果该选项设置为 "bottom"，"left"，"right" 或 "top"，那么图像显示在文本的旁边（如 "bottom"，则图像在文本的下方
    font	指定文本的字体
    foreground	设置前景色
    hidemargin	是否显示菜单项旁边的空白
    image	1. 指定菜单项显示的图片
    2. 该值应该是 PhotoImage，BitmapImage，或者能兼容的对象
    label	指定菜单项显示的文本
    menu	1. 该选项仅在 cascade 类型的菜单中使用
    2. 用于指定它的下级菜单
    offvalue	1. 默认情况下，variable 选项设置为 1 表示选中状态，反之设置为 0
    2. 设置 offvalue 的值可以自定义未选中状态的值
    onvalue	1. 默认情况下，variable 选项设置为 1 表示选中状态，反之设置为 0
    2. 设置 onvalue 的值可以自定义选中状态的值
    selectcolor	指定当菜单项显示为单选按钮或多选按钮时选择中标志的颜色
    selectimage	如果你在单选按钮或多选按钮菜单中使用图片代替文本，那么设置该选项指定被菜单项被选中时显示的图片
    state	1. 跟 text 选项一起使用，用于指定哪一个字符画下划线（例如用于表示键盘快捷键）
    underline	1. 用于指定在该菜单项的某一个字符处画下划线
    2. 例如设置为 1，则说明在该菜单项的第 2 个字符处画下划线
    value	1. 当菜单项为单选按钮时，用于标志该按钮的值
    2. 在同一组中的所有按钮应该拥有各不相同的值
    3. 通过将该值与 variable 选项的值对比，即可判断用户选中了哪个按钮
    4. 如在使用上有不懂具体可以参照 Radiobutton 组件的说明
    variable	1. 当菜单项是单选按钮或多选按钮时，与之关联的变量
    2. 如在使用上有不懂具体可以参照：Checkbutton 和 Radiobutton 组件的说明
    add_cascade(**options)
    -- 添加一个父菜单
    -- 相当于 add("cascade", **options)

    add_checkbutton(**options)
    -- 添加一个多选按钮的菜单项
    -- 相当于 add("checkbutton", **options)

    add_command(**options)
    -- 添加一个普通的命令菜单项
    -- 相当于 add("command", **options)

    add_radiobutton(**options)
    -- 添加一个单选按钮的菜单项
    -- 相当于 add("radiobutton", **options)

    add_separator(**options)
    -- 添加一条分割线
    -- 相当于 add("separator", **options)

    delete(index1, index2=None)
    -- 删除 index1 ~ index2（包含）的所有菜单项
    -- 如果忽略 index2 参数，则删除 index1 指向的菜单项
    -- 注意：对于一个被“撕下”的菜单，你无法使用该方法

    entrycget(index, option)
    -- 获得指定菜单项的某选项的值

    entryconfig(index, **options)
    -- 设置指定菜单项的选项
    -- 选项的参数及具体含义请参考上方 add() 方法

    entryconfigure(index, **options)
    -- 跟 entryconfig() 一样

    index(index)
    -- 返回与 index 参数相应的选项的序号（例如 e.index("end")）

    insert(index, itemType, **options)
    -- 插入指定类型的菜单项到 index 参数指定的位置
    -- itemType 参数指定添加的菜单类型，可以是："command"，"cascade"，"checkbutton"，"radiobutton" 或 "separator"
    -- 选项的参数及具体含义请参考上方 add() 方法

    insert_cascade(index, **options)
    -- 在 index 参数指定的位置添加一个父菜单
    -- 相当于 insert("cascade", **options)

    insert_checkbutton(index, **options)
    -- 在 index 参数指定的位置添加一个多选按钮
    -- 相当于 insert("checkbutton", **options)

    insert_command(index, **options)
    -- 在 index 参数指定的位置添加一个普通的命令菜单项
    -- 相当于 insert("command", **options)

    insert_radiobutton(index, **options)
    -- 在 index 参数指定的位置添加一个单选按钮
    -- 相当于 insert("radiobutton", **options)

    insert_separator(index, **options)
    -- 在 index 参数指定的位置添加一条分割线
    -- 相当于 insert("separator", **options)

    invoke(index)
    -- 调用 index 指定的菜单项相关联的方法
    -- 如果是单选按钮，设置该菜单项为选中状态
    -- 如果是多选按钮，切换该菜单项的选中状态

    post(x, y)
    -- 在指定的位置显示弹出菜单
    -- 参考上方【用法】中的创建弹窗菜单的例子

    type(index)
    -- 获得 index 参数指定菜单项的类型
    -- 返回值可以是："command"，"cascade"，"checkbutton"，"radiobutton" 或 "separator"

    unpost()
    -- 移除弹出菜单

    yposition(index)
    -- 返回 index 参数指定的菜单项的垂直偏移位置
    -- 该方法的目的是为了让你精确放置相对于当前鼠标的位置弹出菜单


win.bind("按键",回调事件)
    响应特殊按键事件
    <Button-1>    鼠标左键
    <Button-2>    鼠标中建
    <Button-3>    鼠标右键
    <Shift_L>     左shift按键响应
    <Shift_R>     右shift按键响应
    <F2>          F2按键相应，F3,F4.....
    <Return>      回车按键相应
    <BackSpace>   退格删除键相应
    a    指定按键盘a键触发
    x    指定按键盘x键触发

